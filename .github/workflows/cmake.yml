name: CMake

on: push

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache apt
        id: cache-apt
        uses: actions/cache@v3
        with:
          path: |
            README.md
            .github/workflows/cmake.yml
          key: ${{ runner.os }}-apt

      - name: Install apt-get dependencies
        if: steps.cache-apt.outputs.cache-hit != 'true'
        run: |
          sudo add-apt-repository ppa:mhier/libboost-latest -y \
            && sudo add-apt-repository ppa:trebelnik-stefina/launchpad-getkeys \
            && sudo apt-get update \
            && sudo apt-get install launchpad-getkeys \
            && sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main' \
            && sudo launchpad-getkeys \
            && sudo apt-get update -y \
            && sudo apt-get install -y libc++-16-dev libc++abi-16-dev lld-16 lldb-16 cmake ninja-build \
              clang-16 clang-tools-16 clang-16-doc libclang-common-16-dev libclang-16-dev libclang1-16 clang-format-16 \
              libllvm-16-ocaml-dev libllvm16 llvm-16 llvm-16-dev llvm-16-doc llvm-16-examples llvm-16-runtime \
              libboost1.82-dev libgl1-mesa-dev libglx-dev librange-v3-dev \
              qt6-base-dev libqt6sql6-psql libqt6qml6 qt6-declarative-dev qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools \
              qml6-module-qtquick-controls qml6-module-qtqml-workerscript qml6-module-qtquick-templates

      - name: Cache externals
        id: cache-external
        uses: actions/cache@v3
        with:
          path: externals/
          key: ${{ runner.os }}-external

      - name: Install external CMake package
        if: steps.cache-external.outputs.cache-hit != 'true'
        run: cd externals && ./install_externals.sh
        env:
          BUILD_TYPE: ${{env.BUILD_TYPE}}

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          cmake -B ${{github.workspace}}/build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_CXX_COMPILER=/usr/bin/clang++-16 \
            -GNinja

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
